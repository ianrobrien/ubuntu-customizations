#!/bin/bash

usage() {
  cat <<EOF

usage: git gone [<options>] [<branch>=origin]

    prune remote branch and:

    -n  list the gone branches (default option)
    -d  delete the gone branches
    -D  delete the gone branches forcefully
    -h  display this text

EOF
}

POSITIONAL=()
OPTIONS=()

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -*)
    OPTION="$1"
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ $# -eq 0 ]; then
  BRANCH="origin"
elif [ $# -eq 1 ]; then
  BRANCH="$1"
else
  usage && echo "too many arguments!" && exit 1
fi

let delete=0
let force=0
let help=0
for (( i=1; i < ${#OPTION}; i++ )); do
  op="${OPTION:$i:1}"
  case $op in
    d)
    let delete=1
    ;;
    D)
    let delete=1
    let force=1
    ;;
    h)
    usage && exit 1
    ;;
    *)
    usage && echo "unknown option $op!" && exit 1
    ;;
  esac
  OPTIONS+="$op"
done

gone="$BRANCH/.*: gone]"
git remote prune "${BRANCH}"

if [ ${#OPTION} -eq 0 ]; then
  git branch -vv | grep "${gone}"
  exit 1
fi

if [ ${delete} -eq 1 ]; then
  if [ ${force} -eq 1 ]; then
    git branch -vv | grep "${gone}" | awk '{print $1}' | xargs git branch -D
  else
    git branch -vv | grep "${gone}" | awk '{print $1}' | xargs git branch -d
  fi
fi
